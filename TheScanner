
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.File;
import java.util.ArrayList;

public class TheScanner {

    States diagram = new States();
    Scanner input = new Scanner(System.in);
    String path = null;
    String line = null;
    ArrayList<String> DFA_NFA = new ArrayList<String>();
    ArrayList<String> the_Strings = new ArrayList<String>();

    public TheScanner() {
    }

    public void userMessage() {

        //System.out.println("Please enter the location/path to your DFA/NFA file now. For example: 'C:\\COSC485_Project1_jpbutler0\\...\\DFA.txt'"+ "\n");
        //path=input.nextLine(); 
        //reader(0);
        //System.out.println("Please enter the location/path to your String file now. For example: 'C:\\COSC485_Project1_jpbutler0\\...\\String.txt'"+ "\n");
        //path=input.nextLine(); 
        //reader(1);

        because_Linux_Hates_Pathing();

        //print_DFA();
        //print_NFA();
        //print_String();

        data_Entry();

        //int i=diagram.find_An_Existing_State("q");
        //System.out.println(i);

        designate_Starting_And_Final_States();

        diagram.print_Starting_State();
        System.out.println();

        diagram.print_Final_State();
        System.out.println();

        designate_State_Connections();
        
        diagram.print_States_And_Connections();
        
        System.out.println();
        
        testing_Strings();

        //diagram.print_States_And_Connections();

        //writer();
    }

    /**
     * 
     * @param choice 
     */
    public void reader(int choice) {
        try {

            File file = new File("DFA.txt");
            //File file = new File(path);
            Scanner scan = new Scanner(file);

            while (scan.hasNextLine()) {
                line = scan.nextLine();
                if ((choice == 0) && (!(line.isEmpty()))) {
                    line = line.trim().toLowerCase();
                    DFA_NFA.add(line);
                } else if ((choice == 1) && (!(line.isEmpty()))) {
                    line = line.trim().toLowerCase();
                    the_Strings.add(line);
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("I'm sorry, but your file pathing was incorect. Please try again.");
            //reader(choice);
        }
    }

    /**
     * 
     */
    public void because_Linux_Hates_Pathing() {

        DFA_NFA.add("M = { States, Alphabet, Transition Functions, Starting State, Final States }");
        DFA_NFA.add("where,");
        DFA_NFA.add("States = { q0, q1, q2 },");
        DFA_NFA.add("Alphabet = { a, b },");
        DFA_NFA.add("Starting State = q0,");
        DFA_NFA.add("Final States = { q2 },");
        DFA_NFA.add("Transition Functions = {");
        DFA_NFA.add("( q0, a, q1 ),");
        DFA_NFA.add("( q1, a, q1 ),");
        DFA_NFA.add("( q1, b, q2 )");
        DFA_NFA.add("}");

        the_Strings.add("aaaaabb");
        the_Strings.add("aaaaaaaa");
        the_Strings.add("aaaaaaab");
        the_Strings.add("bbbbbbbbbb");

        /*
        DFA_NFA.add("M = { States, Alphabet, Transition Functions, Starting State, Final States }");
        DFA_NFA.add("where,");
        DFA_NFA.add("States = { q0, q1, q2 },");
        DFA_NFA.add("Alphabet = { a, b },");
        DFA_NFA.add("Starting State = q0,");
        DFA_NFA.add("Final States = { q2 },");
        DFA_NFA.add("Transition Functions = {");
        DFA_NFA.add("( q0, e, q1 ),");
        DFA_NFA.add("( q0, a, q1 ),");
        DFA_NFA.add("( q0, a, q2 ),");
        DFA_NFA.add("( q1, a, q1 ),");
        DFA_NFA.add("( q1, b, q2 )");
        DFA_NFA.add("}");
         */

        for (int i = 0; i < DFA_NFA.size(); i++) {
            String temp = DFA_NFA.get(i);
            temp = temp.trim().toLowerCase();
            DFA_NFA.remove(i);
            DFA_NFA.add(i, temp);
        }
        for (int i = 0; i < the_Strings.size(); i++) {
            String temp = the_Strings.get(i);
            temp = temp.trim().toLowerCase();
            the_Strings.remove(i);
            the_Strings.add(i, temp);
        }

    }

    //WARNING: test for correctness
    public void writer() {
    }

    public void print_DFA_NFA() {
        System.out.println("The following is the ArrayList for the DFA.txt: ");
        for (int i = 0; i < DFA_NFA.size(); i++) {
            System.out.println(DFA_NFA.get(i));
        }
        System.out.println();
    }

    //WARNING: must change variable for actual pathing txt file ArryayList
    public void print_String() {
        System.out.println("The following is the ArrayList for the String.txt: ");
        for (int i = 0; i < the_Strings.size(); i++) {
            System.out.println(the_Strings.get(i));
        }
        System.out.println();
    }

    public void data_Entry() {
        diagram.create_Sink_State();
        String temp_Seperated = null;
        int start;
        int end;
        int counter = 1;

        int found = -1;
        int k = 1;
        while ((k <= DFA_NFA.size()) && (found == -1)) {
            if ((DFA_NFA.get(k).contains("states")) && (!(DFA_NFA.get(k).contains("final")))) {
                found = k;
            }
            k++;
        }

        String temp = DFA_NFA.get(found);

        start = temp.indexOf("{");
        end = temp.indexOf("}");
        temp = temp.substring(start + 1, end - 1);

        int t = 0;
        int i = 0;
        boolean ending = false;
        while (i < temp.length()) {
            if (temp.substring(i, i + 1).equals(",")) {
                counter++;
                temp_Seperated = temp.substring(t, i);
                temp_Seperated = temp_Seperated.trim();
                if (temp_Seperated.equals("")) {
                    temp_Seperated = " ";
                }
                diagram.create_New_State(temp_Seperated);
                t = i + 1;
            } else if ((!(temp.substring(t).contains(","))) && (ending == false)) {
                temp_Seperated = temp.substring(t);
                temp_Seperated = temp_Seperated.trim();
                if (temp_Seperated.equals("")) {
                    temp_Seperated = " ";
                }
                ending = true;
                diagram.create_New_State(temp_Seperated);
            }
            i++;
        }
    }

    public void designate_Starting_And_Final_States() {
        int found = -1;
        int k = 1;
        String temp = null;
        while ((k < DFA_NFA.size()) && (found == -1)) {
            if ((DFA_NFA.get(k).contains("starting")) && (!(DFA_NFA.get(k).contains("alphabet")))) {
                temp = DFA_NFA.get(k);
                temp = temp.substring(temp.indexOf("=") + 1);
                temp = temp.substring(0, temp.length() - 1);
                if (temp.contains("{")) {
                    temp = temp.substring(temp.indexOf("{") + 1);
                    temp = temp.trim();
                    temp = temp.substring(0, temp.length() - 2);
                }
                temp = temp.trim();
                if (temp.equals("")) {
                    temp = " ";
                }
                diagram.set_Starting_State(temp);
                found = k;
            }
            k++;
        }

        found = -1;
        k = 1;
        while (k < DFA_NFA.size()) {
            if ((DFA_NFA.get(k).contains("final")) && (!(DFA_NFA.get(k).contains("alphabet")))) {
                temp = DFA_NFA.get(k);
                temp = temp.substring(temp.indexOf("=") + 1);
                if (temp.contains("{")) {
                    temp = temp.substring(temp.indexOf("{") + 1);
                    temp = temp.trim();
                    temp = temp.substring(0, temp.length() - 2);
                }
                temp = temp.trim();
                if (temp.equals("")) {
                    temp = " ";
                }
                diagram.set_Final_State(temp);
                found = k;
            }
            k++;
        }
    }

    public void designate_State_Connections() {
        int found = -1;
        int k = 1;
        int locate_End;
        int locate_First;
        int locate;
        String element;
        String connection;
        String current;
        String stateId;
        String current_Broken;
        while (k < DFA_NFA.size()) {
            if ((DFA_NFA.get(k).contains("transition")) && (!(DFA_NFA.get(k).contains("final")))) {
                found = k;
            }
            k++;
        }
        String temp = "";

        while (found < DFA_NFA.size()) {
            temp = temp + " " + DFA_NFA.get(found);
            found++;
        }

        temp = temp.substring(temp.indexOf("{") + 1).trim();
        temp = temp.substring(0, temp.length() - 1).trim();

        current = temp;
        while (current.contains("(")) {
            locate_First = current.indexOf("(");
            current = current.substring(locate_First + 1);
            locate_End = current.indexOf(")");
            current_Broken = current.substring(0, locate_End - 1);

            locate_First = current.indexOf(",");
            stateId = current_Broken.substring(0, locate_First).trim();
            if (stateId.equals("")) {
                stateId = " ";
            }
            current_Broken = current_Broken.substring(locate_First + 1).trim();

            if (current_Broken.substring(0, 1).equals("")) {
                element = " ";
            } else {
                element = current_Broken.substring(0, 1);
            }

            locate_First = current.indexOf(",");
            current_Broken = current_Broken.substring(1, current_Broken.length()).trim();
            current_Broken = current_Broken.substring(1, current_Broken.length()).trim();

            if (current_Broken.equals("")) {
                connection = " ";
            } else {
                connection = current_Broken;
            }

            diagram.add_A_Connection(stateId, element, connection);

            /*
            System.out.println(temp);
            System.out.println(stateId);
            System.out.println(element);
            System.out.println(connection);
             */
        }
    }
     
    public void testing_Strings(){
        String correction=null;
        for(int i=0;i<the_Strings.size();i++){
            //System.out.println(the_Strings.get(i));
            correction=diagram.string_Validation_Check(the_Strings.get(i)); 
            System.out.println(correction+"\n");
        }
    }
    
    
}
