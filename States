
import java.util.ArrayList;

public class States {

    ArrayList<StateNodes> states = new ArrayList<StateNodes>();
    ArrayList<String> final_States = new ArrayList<String>();
    ArrayList<String> state_Elements = new ArrayList<String>();
    ArrayList<Integer> final_States_Location = new ArrayList<Integer>();
    Boolean is_This_An_NFA = false;
    String starting_State = null;
    Integer starting_State_Location = -1;

    public States() {
    }

    /**
     *
     * @param stateId
     * @return stateLocation
     */
    public int find_An_Existing_State(String stateId) {
        int stateLocation = -1;
        String temp;
        for (int i = 0; i < states.size(); i++) {
            temp = states.get(i).return_ID();
            if (temp.equals(stateId)) {
                stateLocation = i;
            }
        }
        return stateLocation;
    }

    /**
     * 
     * @param element 
     */
    public void add_Element(String element) {
        state_Elements.add(element);
    }

    //WARNING: I don't think 'elements' is the right word... Nor is diagram...
    /**
     * 
     */
    public void print_State_Elements() {
        System.out.println("The elements used in this diagram are: ");
        for (int i = 0; i < state_Elements.size(); i++) {
            System.out.print(state_Elements.get(i) + "\t");
        }
    }

    /**
     *
     * @param stateId
     * @param element
     * @param connection
     */
    public void add_A_Connection(String stateId, String element, String connection) {
        int stateLocation = find_An_Existing_State(stateId);
        if (stateLocation == -1) {
            System.out.println("falure");
            return;
        }
        if (element.equals("e")) {
            is_This_An_NFA = true;
        }
        states.get(stateLocation).add_Connection(element, connection);
    }

    /**
     *
     * @return is_This_An_NFA
     */
    public Boolean is_This_An_NFA_Diagram() {
        return is_This_An_NFA;
    }

    /**
     *
     * @param stateId
     */
    public void create_New_State(String stateId) {
        states.add(new StateNodes(stateId));
    }

    //WARNING: must implement the method while readeing dfa.txt
    /**
     *
     */
    public void create_Sink_State() {
        states.add(new StateNodes("{}"));
        states.get(0).set_As_The_Sink_State();
    }

    /*
    //WARNING: on second though ignore this step... this makes it to complicated...just check for sink state durring scan
    public void add_Connection_To_Sink_State(String connection) {
    states.get(0).add_Connection(connection, "{}");
    }*/
    /**
     *
     * @param stateId
     */
    public void set_Starting_State(String stateId) {
        int stateLocation = find_An_Existing_State(stateId);
        if (stateLocation == -1) {
            return;
        }
        states.get(stateLocation).set_As_The_Starting_State();
        starting_State = stateId;
        starting_State_Location = stateLocation;
        //WARNING:this keeps track of the starting state
    }

    /**
     * 
     */
    public void print_Starting_State() {
        System.out.println("The starting state is: " + starting_State);
    }

    //WARNING: must put in a loop for this method in scanner to cover all possible final states
    /**
     *
     * @param stateId
     */
    public void set_Final_State(String stateId) {
        int stateLocation = find_An_Existing_State(stateId);
        if (stateLocation == -1) {
            return;
        }
        //WARNING: this method does not keep track of the final states.However the StateNodes class does keep track of final states; on an individual basis
        final_States.add(stateId);
        final_States_Location.add(stateLocation);
        //WARNING: This ArrayList will also keep track of your final states       
        states.get(stateLocation).set_As_A_Final_State();
    }

    //WARNING: I don't think diagram is the right word
    /**
     * 
     */
    public void print_Final_State() {
        System.out.println("The final states for this diagram are: ");
        for (int i = 0; i < final_States.size(); i++) {
            System.out.print(final_States.get(i) + "\t");
        }
    }

    /**
     *
     * @param the_String
     * @return validation
     */
    public String string_Validation_Check(String the_String) {
        String validation = "is accepted";
        int x = 0;
        int y = 1;
        int stateLocation = starting_State_Location;

        while ((validation.equals("is accepted")) && (y < the_String.length())) {
            String element = the_String.substring(x, y);

            element = string_Validation_Helper(element, stateLocation);

            if (element.equals("false")) {
                validation = "is rejected";
                y = the_String.length() + 5;
            } else {
                stateLocation = find_An_Existing_State(element);
            }

            x++;
            y++;
        }

        return validation;
    }

    //WARNING: this method checks to see if there is a connection. if there is it will return the stateId, if there isn't it will return "false"
    /*
     * 
     */
    public String string_Validation_Helper(String element, Integer stateLocation) {
        String connection = states.get(stateLocation).find_Existing_Connection(element);
        return connection;
    }

    /**
     * 
     */
    public void print_States_And_Connections() {

        System.out.println("\n"+"Printing all states and connections now: ");
        for (int i = 0; i < states.size(); i++) {
            System.out.println("\n"+"Current state: " + states.get(i).return_ID() + " and its connections are: " + "\t");
            for (int t = 0; t < states.get(i).stateConections.size(); t++) {
                String temp = states.get(i).stateConections.get(t);
                System.out.print(temp.charAt(0) + " connected to: " + temp.substring(1) + "\n");
            }
        }
    }
}
